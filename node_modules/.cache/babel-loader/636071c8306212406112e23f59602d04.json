{"ast":null,"code":"var _jsxFileName = \"D:\\\\DATN\\\\movie-app-master\\\\client\\\\src\\\\components\\\\VideoPlayer\\\\VideoPlayer.jsx\";\nimport React from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\n\nclass VideoPlayer extends React.Component {\n  componentDidMount() {\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, this.props.src, function onPlayerReady() {\n      console.log('onPlayerReady', this);\n    });\n  } // destroy player on unmount\n\n\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n    // When a user moves from one title to the next, the VideoPlayer component will not be unmounted,\n    // instead its properties will be updated with the details of the new video. In this case,\n    // we can update the src of the existing player with the new video URL.\n    console.log(\"render\");\n\n    if (this.player) {\n      this.player.src({\n        type: newProps.video.mime_type,\n        src: newProps.video.video_url\n      });\n      console.log(newProps.video.video_url);\n    }\n  } // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n  // use `ref` to give Video JS a reference to the video DOM element: https://reactjs.org/docs/refs-and-the-dom\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-vjs-player\": true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: node => this.videoNode = node,\n      className: \"video-js\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default VideoPlayer;","map":{"version":3,"sources":["D:/DATN/movie-app-master/client/src/components/VideoPlayer/VideoPlayer.jsx"],"names":["React","videojs","VideoPlayer","Component","componentDidMount","player","videoNode","props","src","onPlayerReady","console","log","componentWillUnmount","dispose","componentWillReceiveProps","newProps","type","video","mime_type","video_url","render","node"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,4BAAP;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AACtCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,MAAL,GAAcJ,OAAO,CAAC,KAAKK,SAAN,EAAiB,KAAKC,KAAL,CAAWC,GAA5B,EAAiC,SAASC,aAAT,GAAyB;AAC7EC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,IAA7B;AACD,KAFoB,CAArB;AAGD,GANqC,CAOxC;;;AACAC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKP,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYQ,OAAZ;AACD;AACF;;AACDC,EAAAA,yBAAyB,CAACC,QAAD,EAAW;AAClC;AACA;AACA;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,QAAI,KAAKN,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYG,GAAZ,CAAgB;AACdQ,QAAAA,IAAI,EAAED,QAAQ,CAACE,KAAT,CAAeC,SADP;AAEdV,QAAAA,GAAG,EAAEO,QAAQ,CAACE,KAAT,CAAeE;AAFN,OAAhB;AAIAT,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACE,KAAT,CAAeE,SAA3B;AACD;AACF,GAzBuC,CA0BxC;AACA;AACA;AAEA;;;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,6BAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,GAAG,EAAGC,IAAI,IAAI,KAAKf,SAAL,GAAiBe,IAAtC;AAA6C,MAAA,SAAS,EAAC,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AArCuC;;AAwC1C,eAAenB,WAAf","sourcesContent":["import React from 'react';\r\nimport videojs from 'video.js';\r\nimport 'video.js/dist/video-js.css';\r\n\r\nclass VideoPlayer extends React.Component {\r\n    componentDidMount() {\r\n      // instantiate Video.js\r\n      this.player = videojs(this.videoNode, this.props.src, function onPlayerReady() {\r\n        console.log('onPlayerReady', this)\r\n      });\r\n    }\r\n  // destroy player on unmount\r\n  componentWillUnmount() {\r\n    if (this.player) {\r\n      this.player.dispose();\r\n    }\r\n  }\r\n  componentWillReceiveProps(newProps) {\r\n    // When a user moves from one title to the next, the VideoPlayer component will not be unmounted,\r\n    // instead its properties will be updated with the details of the new video. In this case,\r\n    // we can update the src of the existing player with the new video URL.\r\n    console.log(\"render\")\r\n    if (this.player) {\r\n      this.player.src({\r\n        type: newProps.video.mime_type,\r\n        src: newProps.video.video_url\r\n      });\r\n      console.log(newProps.video.video_url);\r\n    } \r\n  }\r\n  // wrap the player in a div with a `data-vjs-player` attribute\r\n  // so videojs won't create additional wrapper in the DOM\r\n  // see https://github.com/videojs/video.js/pull/3856\r\n  \r\n  // use `ref` to give Video JS a reference to the video DOM element: https://reactjs.org/docs/refs-and-the-dom\r\n  render() {\r\n    return (\r\n      <div data-vjs-player>\r\n        <video ref={ node => this.videoNode = node } className=\"video-js\"></video>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default VideoPlayer;"]},"metadata":{},"sourceType":"module"}