{"ast":null,"code":"var _jsxFileName = \"D:\\\\DATN\\\\movie-app-master\\\\client\\\\src\\\\components\\\\VideoPlayer\\\\VideoPlayer.jsx\";\n// import React, { useEffect, useRef, useState } from 'react';\n// import PropTypes from 'prop-types';\n// import videojs from 'video.js';\n// import 'video.js/dist/video-js.css';\n// // eslint-disable-next-line import/prefer-default-export\n// const usePlayer = ({ src, controls, autoplay }) => {\n//   const options = {\n//     fill: true,\n//     fluid: true,\n//     preload: 'auto',\n//     html5: {\n//       hls: {\n//         enableLowInitialPlaylist: true,\n//         smoothQualityChange: true,\n//         overrideNative: true,\n//       },\n//     },\n//   };\n//   const videoRef = useRef(null);\n//   const [player, setPlayer] = useState(null);\n//   useEffect(() => {\n//     const vjsPlayer = videojs(videoRef.current, {\n//       ...options,\n//       controls,\n//       autoplay,\n//       sources: [src],\n//     });\n//     setPlayer(vjsPlayer);\n//     return () => {\n//       if (player !== null) {\n//         player.dispose();\n//       }\n//     };\n//   }, []);\n//   useEffect(() => {\n//     if (player !== null) {\n//         console.log(\"sources not null\");\n//       player.src({ src,type: 'video/mp4' });\n//     }\n//   }, [src]);\n//   return videoRef;\n// };\n// const VideoPlayer = ({ src, controls, autoplay }) => {\n//   const playerRef = usePlayer({ src, controls, autoplay });\n//   return (\n//     <div data-vjs-player>\n//       <video ref={playerRef} className=\"video-js\" />\n//     </div>\n//   );\n// };\n// VideoPlayer.propTypes = {\n//   src: PropTypes.string.isRequired,\n//   controls: PropTypes.bool,\n//   autoplay: PropTypes.bool,\n// };\n// VideoPlayer.defaultProps = {\n//   controls: true,\n//   autoplay: false,\n// };\n// export default VideoPlayer;\nimport React from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css'; // video.js player from the docs: https://github.com/videojs/video.js/blob/master/docs/guides/react.md\n\nclass VideoPlayer extends React.Component {\n  componentDidMount() {\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n      console.log('onPlayerReady', this);\n    });\n  } // destroy player on unmount\n\n\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n  }\n\n  componentWillReceiveProps(newProps) {\n    // When a user moves from one title to the next, the VideoPlayer component will not be unmounted,\n    // instead its properties will be updated with the details of the new video. In this case,\n    // we can update the src of the existing player with the new video URL.\n    if (this.player) {\n      this.player.src({\n        type: newProps.video.mime_type,\n        src: newProps.video.video_url\n      });\n    }\n  } // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n  // use `ref` to give Video JS a reference to the video DOM element: https://reactjs.org/docs/refs-and-the-dom\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      \"data-vjs-player\": true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: node => this.videoNode = node,\n      className: \"video-js\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default VideoPlayer;","map":{"version":3,"sources":["D:/DATN/movie-app-master/client/src/components/VideoPlayer/VideoPlayer.jsx"],"names":["React","videojs","VideoPlayer","Component","componentDidMount","player","videoNode","props","onPlayerReady","console","log","componentWillUnmount","dispose","componentWillReceiveProps","newProps","src","type","video","mime_type","video_url","render","node"],"mappings":";AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,4BAAP,C,CAEA;;AAEA,MAAMC,WAAN,SAA0BF,KAAK,CAACG,SAAhC,CAA0C;AACxCC,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,MAAL,GAAcJ,OAAO,CAAC,KAAKK,SAAN,EAAiB,KAAKC,KAAtB,EAA6B,SAASC,aAAT,GAAyB;AACzEC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,IAA7B;AACD,KAFoB,CAArB;AAGD,GANuC,CAQxC;;;AACAC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKN,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYO,OAAZ;AACD;AACF;;AAEDC,EAAAA,yBAAyB,CAACC,QAAD,EAAW;AAClC;AACA;AACA;AACA,QAAI,KAAKT,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYU,GAAZ,CAAgB;AACdC,QAAAA,IAAI,EAAEF,QAAQ,CAACG,KAAT,CAAeC,SADP;AAEdH,QAAAA,GAAG,EAAED,QAAQ,CAACG,KAAT,CAAeE;AAFN,OAAhB;AAID;AACF,GAzBuC,CA2BxC;AACA;AACA;AAEA;;;AACAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,6BAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,GAAG,EAAGC,IAAI,IAAI,KAAKf,SAAL,GAAiBe,IAAtC;AAA6C,MAAA,SAAS,EAAC,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAtCuC;;AAyC1C,eAAenB,WAAf","sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import videojs from 'video.js';\r\n// import 'video.js/dist/video-js.css';\r\n\r\n// // eslint-disable-next-line import/prefer-default-export\r\n// const usePlayer = ({ src, controls, autoplay }) => {\r\n//   const options = {\r\n//     fill: true,\r\n//     fluid: true,\r\n//     preload: 'auto',\r\n//     html5: {\r\n//       hls: {\r\n//         enableLowInitialPlaylist: true,\r\n//         smoothQualityChange: true,\r\n//         overrideNative: true,\r\n//       },\r\n//     },\r\n//   };\r\n//   const videoRef = useRef(null);\r\n//   const [player, setPlayer] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const vjsPlayer = videojs(videoRef.current, {\r\n//       ...options,\r\n//       controls,\r\n//       autoplay,\r\n//       sources: [src],\r\n//     });\r\n//     setPlayer(vjsPlayer);\r\n  \r\n//     return () => {\r\n//       if (player !== null) {\r\n//         player.dispose();\r\n//       }\r\n//     };\r\n//   }, []);\r\n//   useEffect(() => {\r\n//     if (player !== null) {\r\n//         console.log(\"sources not null\");\r\n//       player.src({ src,type: 'video/mp4' });\r\n//     }\r\n//   }, [src]);\r\n\r\n//   return videoRef;\r\n// };\r\n\r\n// const VideoPlayer = ({ src, controls, autoplay }) => {\r\n//   const playerRef = usePlayer({ src, controls, autoplay });\r\n\r\n//   return (\r\n//     <div data-vjs-player>\r\n//       <video ref={playerRef} className=\"video-js\" />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// VideoPlayer.propTypes = {\r\n//   src: PropTypes.string.isRequired,\r\n//   controls: PropTypes.bool,\r\n//   autoplay: PropTypes.bool,\r\n// };\r\n\r\n// VideoPlayer.defaultProps = {\r\n//   controls: true,\r\n//   autoplay: false,\r\n// };\r\n\r\n// export default VideoPlayer;\r\n\r\nimport React from 'react';\r\nimport videojs from 'video.js';\r\nimport 'video.js/dist/video-js.css';\r\n\r\n// video.js player from the docs: https://github.com/videojs/video.js/blob/master/docs/guides/react.md\r\n\r\nclass VideoPlayer extends React.Component {\r\n  componentDidMount() {\r\n    // instantiate Video.js\r\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\r\n      console.log('onPlayerReady', this)\r\n    });\r\n  }\r\n\r\n  // destroy player on unmount\r\n  componentWillUnmount() {\r\n    if (this.player) {\r\n      this.player.dispose();\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(newProps) {\r\n    // When a user moves from one title to the next, the VideoPlayer component will not be unmounted,\r\n    // instead its properties will be updated with the details of the new video. In this case,\r\n    // we can update the src of the existing player with the new video URL.\r\n    if (this.player) {\r\n      this.player.src({\r\n        type: newProps.video.mime_type,\r\n        src: newProps.video.video_url\r\n      });\r\n    } \r\n  }\r\n\r\n  // wrap the player in a div with a `data-vjs-player` attribute\r\n  // so videojs won't create additional wrapper in the DOM\r\n  // see https://github.com/videojs/video.js/pull/3856\r\n  \r\n  // use `ref` to give Video JS a reference to the video DOM element: https://reactjs.org/docs/refs-and-the-dom\r\n  render() {\r\n    return (\r\n      <div data-vjs-player>\r\n        <video ref={ node => this.videoNode = node } className=\"video-js\"></video>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default VideoPlayer;"]},"metadata":{},"sourceType":"module"}