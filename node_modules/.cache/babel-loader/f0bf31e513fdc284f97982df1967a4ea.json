{"ast":null,"code":"var _jsxFileName = \"D:\\\\DATN\\\\movie-app-master\\\\client\\\\src\\\\components\\\\VideoPlayer\\\\VideoPlayer.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\nconst options = {\n  fill: true,\n  fluid: true,\n  preload: 'auto',\n  controlBar: {\n    children: ['playToggle', 'progressControl', 'volumePanel', 'qualitySelector', 'fullscreenToggle']\n  },\n  html5: {\n    hls: {\n      enableLowInitialPlaylist: true,\n      smoothQualityChange: true,\n      overrideNative: true\n    }\n  }\n}; // eslint-disable-next-line import/prefer-default-export\n\nconst usePlayer = ({\n  src,\n  controls,\n  autoplay\n}) => {\n  const videoRef = useRef(null);\n  const [player, setPlayer] = useState(null);\n  useEffect(() => {\n    const vjsPlayer = videojs(videoRef.current, { ...options,\n      controls,\n      autoplay,\n      // sources: {src,type: 'video/mp4' },\n      sources: src\n    }); // console.log(vjsPlayer.sources)\n\n    setPlayer(vjsPlayer); // console.log(vjsPlayer)\n\n    console.log(src);\n    return () => {\n      if (player !== null) {\n        player.dispose();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (player !== null) {\n      // console.log(\"sources not null\");\n      player.src({\n        src\n      });\n    }\n  }, [src]); // console.log(videoRef)\n\n  return videoRef;\n};\n\nconst VideoPlayer = ({\n  src,\n  controls,\n  autoplay,\n  options\n}) => {\n  const playerRef = usePlayer({\n    src,\n    controls,\n    autoplay,\n    options\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-vjs-player\": true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    ref: playerRef,\n    className: \"video-js\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\nVideoPlayer.propTypes = {\n  src: PropTypes.string.isRequired,\n  controls: PropTypes.bool,\n  autoplay: PropTypes.bool,\n  options: PropTypes.bool\n};\nVideoPlayer.defaultProps = {\n  controls: true,\n  autoplay: false\n};\nexport default VideoPlayer;","map":{"version":3,"sources":["D:/DATN/movie-app-master/client/src/components/VideoPlayer/VideoPlayer.jsx"],"names":["React","useEffect","useRef","useState","PropTypes","videojs","options","fill","fluid","preload","controlBar","children","html5","hls","enableLowInitialPlaylist","smoothQualityChange","overrideNative","usePlayer","src","controls","autoplay","videoRef","player","setPlayer","vjsPlayer","current","sources","console","log","dispose","VideoPlayer","playerRef","propTypes","string","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport videojs from 'video.js';\r\nimport 'video.js/dist/video-js.css';\r\n\r\n\r\nconst options = {\r\n  fill: true,\r\n  fluid: true,\r\n  preload: 'auto',  \r\n  controlBar: {\r\n    children: [\r\n       'playToggle',\r\n       'progressControl',\r\n       'volumePanel',\r\n       'qualitySelector',\r\n       'fullscreenToggle',\r\n    ],\r\n },\r\n  html5: {\r\n    hls: {\r\n      enableLowInitialPlaylist: true,\r\n      smoothQualityChange: true,\r\n      overrideNative: true,\r\n    },\r\n  },\r\n};\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nconst usePlayer = ({ src, controls, autoplay }) => {\r\n  const videoRef = useRef(null);\r\n  const [player, setPlayer] = useState(null);\r\n  useEffect(() => {\r\n    const vjsPlayer = videojs(videoRef.current, {\r\n      ...options,\r\n      controls,\r\n      autoplay,\r\n      // sources: {src,type: 'video/mp4' },\r\n      sources:src\r\n    });\r\n    // console.log(vjsPlayer.sources)\r\n    setPlayer(vjsPlayer);\r\n    // console.log(vjsPlayer)\r\n    console.log(src)\r\n    return () => {\r\n      if (player !== null) {\r\n        player.dispose();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (player !== null) {\r\n        // console.log(\"sources not null\");\r\n      player.src({ src});\r\n    }\r\n  }, [src]);\r\n  // console.log(videoRef)\r\n  return videoRef;\r\n};\r\n\r\nconst VideoPlayer = ({ src, controls, autoplay, options }) => {\r\n  const playerRef = usePlayer({ src, controls, autoplay, options });\r\n\r\n  return (\r\n    <div data-vjs-player>\r\n      <video ref={playerRef} className=\"video-js\" />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nVideoPlayer.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  controls: PropTypes.bool,\r\n  autoplay: PropTypes.bool,\r\n  options: PropTypes.bool\r\n};\r\n\r\nVideoPlayer.defaultProps = {\r\n  controls: true,\r\n  autoplay: false,\r\n};\r\n\r\nexport default VideoPlayer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}