{"ast":null,"code":"// import React, { useEffect, useRef, useState } from 'react';\n// import PropTypes from 'prop-types';\n// import videojs from 'video.js';\n// import 'video.js/dist/video-js.css';\n// // eslint-disable-next-line import/prefer-default-export\n// const usePlayer = ({ src, controls, autoplay }) => {\n//   const options = {\n//     fill: true,\n//     fluid: true,\n//     preload: 'auto',\n//     html5: {\n//       hls: {\n//         enableLowInitialPlaylist: true,\n//         smoothQualityChange: true,\n//         overrideNative: true,\n//       },\n//     },\n//   };\n//   const videoRef = useRef(null);\n//   const [player, setPlayer] = useState(null);\n//   useEffect(() => {\n//     const vjsPlayer = videojs(videoRef.current, {\n//       ...options,\n//       controls,\n//       autoplay,\n//       sources: [src],\n//     });\n//     setPlayer(vjsPlayer);\n//     return () => {\n//       if (player !== null) {\n//         player.dispose();\n//       }\n//     };\n//   }, []);\n//   useEffect(() => {\n//     if (player !== null) {\n//         console.log(\"sources not null\");\n//       player.src({ src,type: 'video/mp4' });\n//     }\n//   }, [src]);\n//   return videoRef;\n// };\n// const VideoPlayer = ({ src, controls, autoplay }) => {\n//   const playerRef = usePlayer({ src, controls, autoplay });\n//   return (\n//     <div data-vjs-player>\n//       <video ref={playerRef} className=\"video-js\" />\n//     </div>\n//   );\n// };\n// VideoPlayer.propTypes = {\n//   src: PropTypes.string.isRequired,\n//   controls: PropTypes.bool,\n//   autoplay: PropTypes.bool,\n// };\n// VideoPlayer.defaultProps = {\n//   controls: true,\n//   autoplay: false,\n// };\n// export default VideoPlayer;","map":{"version":3,"sources":["D:/DATN/movie-app-master/client/src/components/VideoPlayer/VideoPlayer.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import videojs from 'video.js';\r\n// import 'video.js/dist/video-js.css';\r\n\r\n// // eslint-disable-next-line import/prefer-default-export\r\n// const usePlayer = ({ src, controls, autoplay }) => {\r\n//   const options = {\r\n//     fill: true,\r\n//     fluid: true,\r\n//     preload: 'auto',\r\n//     html5: {\r\n//       hls: {\r\n//         enableLowInitialPlaylist: true,\r\n//         smoothQualityChange: true,\r\n//         overrideNative: true,\r\n//       },\r\n//     },\r\n//   };\r\n//   const videoRef = useRef(null);\r\n//   const [player, setPlayer] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const vjsPlayer = videojs(videoRef.current, {\r\n//       ...options,\r\n//       controls,\r\n//       autoplay,\r\n//       sources: [src],\r\n//     });\r\n//     setPlayer(vjsPlayer);\r\n  \r\n//     return () => {\r\n//       if (player !== null) {\r\n//         player.dispose();\r\n//       }\r\n//     };\r\n//   }, []);\r\n//   useEffect(() => {\r\n//     if (player !== null) {\r\n//         console.log(\"sources not null\");\r\n//       player.src({ src,type: 'video/mp4' });\r\n//     }\r\n//   }, [src]);\r\n\r\n//   return videoRef;\r\n// };\r\n\r\n// const VideoPlayer = ({ src, controls, autoplay }) => {\r\n//   const playerRef = usePlayer({ src, controls, autoplay });\r\n\r\n//   return (\r\n//     <div data-vjs-player>\r\n//       <video ref={playerRef} className=\"video-js\" />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// VideoPlayer.propTypes = {\r\n//   src: PropTypes.string.isRequired,\r\n//   controls: PropTypes.bool,\r\n//   autoplay: PropTypes.bool,\r\n// };\r\n\r\n// VideoPlayer.defaultProps = {\r\n//   controls: true,\r\n//   autoplay: false,\r\n// };\r\n\r\n// export default VideoPlayer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}